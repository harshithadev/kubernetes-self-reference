We can confirm that a container based on the mongo image is indeed 
running inside the cluster by listing all the containers based on the mongo image.
   ... docker exec -it k3d-mycluster-server-0 ctr container ls | grep mongo 

//create pods
//but not the best way to initiate
//imperative way to tell Kubernetes
//the right way is - declarative
kubectl run db --image mongo

//view pods 
kubectl get pods

//delete pod 
kubectl delete pod db

//declarative way to initialise pods 
//a way to define what we need in a file and pass that information to Kubernetes
//a documented and repeatable process, that can (and should) be version controlled as well.
    ... kubectl create -f dbpod.yml
//dbpod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    type: db
    vendor: MongoLabs
spec:
  containers:
  - name: db
    image: mongo:3.3
    command: ["mongod"]
    args: ["--rest", "--httpinterface"]
<!-- 
    Line 1-2: We’re using v1 of Kubernetes Pods API. Both apiVersion and kind are mandatory. That way, Kubernetes 
    knows what we want to do (create a Pod) and which API version to use.

    Line 3-7: The next section is metadata. It provides information that does not influence how the Pod behaves. 
    We used metadata to define the name of the Pod (db) and a few labels. Later on, when we move into Controllers, 
    labels will have a practical purpose. For now, they are purely informational.

    Line 8: The last section is the spec in which we defined a single container. As you might have guessed, we 
    can have multiple containers defined as a Pod. Otherwise, the section would be written in singular 
    (container without s). We’ll explore multi-container Pods later.

    Line 12: In our case, the container is defined with the name (db), the image (mongo), the command that should 
    be executed when the container starts (mongod)

    Line 13: Finally, the set of arguments. The arguments are defined as an array with, in this case, two 
    elements (--rest and --httpinterface). -->
https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#pod-v1-core

//commands to get details
    ... kubectl get pods -o wide

    ... kubectl get pods -o json

    ... kubectl get pods -o yaml

    ... kubectl describe pod db

 //more useful to describe resources by referencing the file that defines them. 
 //That way there is no confusion nor need to remember the names of resources.
    ... kubectl describe -f db.yml


<!-- Sequential breakdown of events

The sequence of events that transpired with the kubectl create -f db.yml command is as follows:

    Kubernetes client (kubectl) sent a request to the API server requesting creation of a Pod defined in the db.yml file.

    Since the scheduler is watching the API server for new events, it detected that there is an unassigned Pod.

    The scheduler decided which node to assign the Pod to and sent that information to the API server.

    Kubelet is also watching the API server. It detected that the Pod was assigned to the node it is running on.

    Kubelet sent a request to Docker requesting the creation of the containers that form the Pod. In our case, the Pod defines a single container based on the mongo image.

    Finally, Kubelet sent a request to the API server notifying it that the Pod was created successfully. -->






